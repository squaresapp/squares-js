"use strict";
class Raw extends (() => Object)() {
    doc;
    /**
     * Stores the immutable set of HTML elements that
     * are recognized as HTML element creation functions.
     */
    static elements = new Set(["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "font", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "i", "iframe", "img", "input", "ins", "kbd", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "slot", "small", "source", "span", "strong", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "video", "wbr"]);
    /**
     * Stores the list of strings that are recognized as CSS properties by RawJS,
     * (as opposed to being recognized as HTML attributes). Users may contribute
     * strings to this set in order to add support for custom CSS properties.
     */
    static properties = (() => {
        const names = [];
        if (typeof document !== "undefined")
            for (const key in document.documentElement.style)
                names.push(key);
        return new Set(names);
    })();
    /** */
    static HTMLCustomElement = (typeof HTMLElement !== "undefined") &&
        class HTMLCustomElement extends HTMLElement {
        };
    /**
     * Creates a new instance of a Raw element creator.
     *
     * @param doc A reference to the Document object over
     * which this Raw instance operates.
     */
    constructor(doc) {
        super();
        this.doc = doc;
        for (const tagName of Raw.elements)
            this.define(tagName);
    }
    /**
     * Defines a custom element which derives from the specified constructor.
     */
    define(tagName, constructor = Raw.HTMLCustomElement) {
        if (!Raw.elements.has(tagName)) {
            tagName += "-element";
            if (typeof customElements !== "undefined")
                customElements.define(tagName, constructor);
        }
        Object.defineProperty(this, tagName, {
            value: (...params) => this.apply(this.doc.createElement(tagName), params)
        });
    }
    text(a, ...b) {
        if (typeof a === "string")
            return this.doc.createTextNode(a);
        const nodes = [];
        for (let i = -1; ++i < b.length;)
            nodes.push(a[i], b[i]);
        nodes.push(a[a.length - 1]);
        return nodes.map(n => typeof n === "string" ? this.doc.createTextNode(n) : n);
    }
    get(...elements) {
        return (...params) => {
            for (const e of elements) {
                if (Raw.is.element(e) || Raw.is.shadow(e))
                    this.apply(e, params);
                else if (Raw.is.element(e.head))
                    this.apply(e.head, params);
            }
            return elements[0] || null;
        };
    }
    /**
     * An object that contains environment-agnostic guard functions
     * to make various assertions about data.
     */
    static is = {
        node(n) {
            const type = n?.nodeType;
            return typeof type === "number" && type > 0 && type < 13;
        },
        element(e) {
            return !!e && e.nodeType === 1;
        },
        text(t) {
            return !!t && t.nodeType === 3;
        },
        comment(c) {
            return !!c && c.nodeType === 8;
        },
        shadow(c) {
            return !!c && c.nodeType === 11 && Raw.is.element(c.host);
        },
        /**
         * Returns a boolean value that indicates whether the specified
         * string is the name of a valid CSS property in camelCase format,
         * for example, "fontWeight".
         */
        property(name) {
            return Raw.properties.has(name);
        }
    };
    /**
     * Creates and returns a ShadowRoot, in order to access
     * the shadow DOM of a particular element.
     */
    shadow(...params) {
        return e => {
            const shadow = e.shadowRoot || e.attachShadow({ mode: "open" });
            this.apply(shadow, params);
        };
    }
    /**
     * Creates a DOM element using the standard JSX element creation call signature.
     * Any Raw.Param values that are strings are converted to DOM Text nodes rather
     * than class names.
     */
    jsx(tag, properties, ...params) {
        const e = this.doc.createElement(tag);
        if (properties)
            for (const [n, v] of Object.entries(properties))
                e[n] = v;
        params = params.filter(p => p).map(p => typeof p === "string" ? this.text(p) : p);
        return this.apply(e, params);
    }
    /**
     * This is the main applicator method where all params are applied
     * to the target.
     *
     * PROCEED WITH CAUTION. This code is VERY performance sensitive.
     * It uses constructor checks instead of instanceof and typeof in an effort
     * to nullify any performance overhead. Be careful of changing this code
     * without having full knowledge of what you're doing. Chesterton's
     * fence rule applies here.
     */
    apply(e, params) {
        for (let i = -1, length = params.length; ++i < length;) {
            const param = params[i];
            if (!param)
                continue;
            if (Raw.is.node(param)) {
                e.append(param);
            }
            else if (Array.isArray(param)) {
                this.apply(e, param);
            }
            else
                switch (param.constructor) {
                    case Raw.Event:
                        {
                            if (e) {
                                const he = param;
                                if (he.target)
                                    he.host = e;
                                else {
                                    e.addEventListener(he.type, he.handler, he.options);
                                    if (he.type === "connected" || he.type === "rendered")
                                        this.awaitingConnection.push([e, he.type === "rendered"]);
                                }
                            }
                        }
                        break;
                    case String:
                        {
                            // Note that ShadowRoots cannot accept string parameters.
                            const cls = param;
                            e.classList.add(...cls.split(/\s+/g));
                            if (cls.indexOf("raw-" /* Raw.GeneratedClassPrefix.value */) === 0) {
                                const maybeShadow = e.getRootNode();
                                if (Raw.is.shadow(maybeShadow))
                                    this.toShadow(maybeShadow, cls);
                            }
                        }
                        break;
                    case Object:
                        {
                            const el = e;
                            for (const [name, value] of Object.entries(param)) {
                                // JavaScript numbers that are specified in the width and height properties
                                // are injected as HTML attributes rather than assigned as CSS properties.
                                if (value &&
                                    (name === "width" || name === "height") && typeof value === "number" ||
                                    e.tagName === "META") {
                                    e.setAttribute(name, value.toString());
                                }
                                else if (name === "data") {
                                    for (const [attrName, attrValue] of Object.entries(value || {}))
                                        e.setAttribute("data-" + attrName, String(attrValue));
                                }
                                // Add support for { class: "class names here" }
                                // Because strings are interpreted as strings, this should only ever come up
                                // when using JSX to construct elements such as: <div class="the class">
                                else if (name === "class") {
                                    e.classList.add(...value.split(/\s+/g));
                                }
                                // Width, height, and background properties are special cased.
                                // They are interpreted as CSS properties rather than HTML attributes.
                                else if (name in e &&
                                    name !== "background" &&
                                    name !== "width" &&
                                    name !== "height") {
                                    // Some attributes can't be assigned with keyed property access,
                                    // at least in Chromium-based browsers (HTMLVideoElement.muted).
                                    // So here, we're assigning both the JavaScript property and calling
                                    // the setAttribute() function to ensure that the attribute always 
                                    // shows up in the Element.getAttributes() list.
                                    el[name] = value;
                                    e.setAttribute(name, value);
                                }
                                else if (Raw.is.property(name)) {
                                    this.setProperty(el, name, value);
                                }
                            }
                        }
                        break;
                    case Function:
                        {
                            if (Raw.is.element(e) || Raw.is.shadow(e)) {
                                const fn = param;
                                const subParams = fn(e);
                                if (subParams)
                                    this.apply(e, Array.isArray(subParams) ? subParams : [subParams]);
                            }
                        }
                    default:
                        {
                            // Ugly, but high-performance way to check if the param is a Hat
                            // (meaning, an object with a .head HTMLElement property) coming 
                            // from the Hat library.
                            if (!!param.head && param.head.ELEMENT_NODE === 1) {
                                this.apply(e, [param.head]);
                            }
                            else if (typeof param === "function" && param.constructor.name === "AsyncFunction") {
                                this.apply(e, param(e));
                            }
                        }
                }
        }
        return e;
    }
    //# Event Related
    /** */
    static Event = class Event {
        target;
        type;
        handler;
        options;
        /** */
        constructor(target, type, handler, options = {}) {
            this.target = target;
            this.type = type;
            this.handler = handler;
            this.options = options;
        }
        /**
         * Stores the element that "hosts" the event, which is not necessarily
         * the target event. When the host element is removed from the DOM,
         * the event handler is removed.
         */
        host = null;
    };
    /** */
    on(...args) {
        const target = typeof args[0] === "string" ? null : args[0];
        const type = typeof args[0] === "string" ? args[0] : args[1];
        const handler = typeof args[1] === "function" ? args[1] : args[2];
        const last = args.pop();
        const options = typeof last === "function" ? {} : last;
        if (type === "connected" || type === "disconnected") {
            this.maybeInstallRootObserver();
            options.once = true;
        }
        const hev = new Raw.Event(target, type, handler, options);
        // If the event has a defined target, then add the event listener right away,
        // and the apply() function will assign any host element, if present.
        if (target) {
            let handler;
            target.addEventListener(hev.type, handler = (ev) => {
                if (hev.host?.isConnected !== false)
                    hev.handler(ev);
                else
                    target.removeEventListener(hev.type, handler);
            }, options);
        }
        return hev;
    }
    //# Connection Events
    /** */
    maybeInstallRootObserver() {
        if (this.hasInstalledRootObserver || typeof MutationObserver === "undefined")
            return;
        this.hasInstalledRootObserver = true;
        new MutationObserver(() => {
            const invokations = [];
            for (let i = this.awaitingConnection.length; i-- > 0;) {
                const tuple = this.awaitingConnection[i];
                if (!tuple[0].isConnected)
                    continue;
                this.awaitingConnection.splice(i, 1);
                invokations.push(tuple);
            }
            // Run the callbacks in a separate pass, to deal with the fact that
            // there could be multiple awaiters watching the same element,
            // but also to handle the fact the callback functions could modify
            // the awaiting list.
            for (const [element, defer] of invokations) {
                const event = new Event("connected", {
                    bubbles: true,
                    cancelable: true,
                });
                if (defer)
                    setTimeout(() => element.dispatchEvent(event), 1);
                else
                    element.dispatchEvent(event);
            }
        }).observe(this.doc.body, { childList: true, subtree: true });
    }
    hasInstalledRootObserver = false;
    awaitingConnection = [];
    style(...args) {
        const element = this.doc.createElement("style");
        element.attach = (n) => {
            const root = n ? n.getRootNode() : this.doc;
            const container = root instanceof Document ? root.head : root;
            container.appendChild(element);
            return element;
        };
        if (args.length === 0)
            return element;
        if (typeof args[0] !== "string")
            this.get(element)(args.shift());
        if (args.every(a => Raw.is.text(a))) {
            element.append(...args);
            return element;
        }
        const cssText = [];
        // Creates a fake CSS rule, whose only purpose is to capture the calls
        // to setProperty(), and forward the string contents to the cssText array,
        // so that a string rule can be composed.
        const fakeRule = {
            style: {
                setProperty(name, value, important) {
                    cssText.push(name + ": " + value + (important ? " !" + important : "") + ";");
                }
            }
        };
        for (const group of this.createCssRuleGroups(args)) {
            cssText.push(group.selector, "{");
            for (const stylesObject of group.styles)
                for (let [n, v] of Object.entries(stylesObject))
                    if (typeof v === "string" || (typeof v === "number" && v === v))
                        this.setProperty(fakeRule, n, v, group.selector);
            cssText.push("}");
        }
        element.append(new Text(cssText.join("")));
        return element;
    }
    /**
     * Creates a series of CSS rules internally, and returns a class that
     * can be applied to HTML elements in order to apply the rules to
     * them.
     */
    css(...components) {
        const styleElement = this.getScopedStyleElement(this.doc);
        const cssJsonText = JSON.stringify(components);
        components = JSON.parse(cssJsonText);
        const cssHashClass = "raw-" /* Raw.GeneratedClassPrefix.value */ + this.hash(cssJsonText);
        this.applyCssToScope(styleElement, cssHashClass, components);
        return cssHashClass;
    }
    /**
     * Copies the rules that are connected to the specified CSS class
     * (which is expected to be a hash of CSS rules) so that they are
     * visible within the specified ShadowRoot.
     */
    toShadow(shadow, cssHashClass) {
        const styleElement = this.getScopedStyleElement(shadow);
        const cssParams = Raw.ruleData.get(styleElement)?.get(cssHashClass);
        if (cssParams)
            this.applyCssToScope(styleElement, cssHashClass, cssParams);
    }
    /** */
    applyCssToScope(styleElement, cssHashClass, components) {
        // Don't create another CSS rule if there is already one
        // that exists within the provided <style> element with
        // the provided rule hash.
        if (Raw.ruleData.get(styleElement)?.get(cssHashClass))
            return;
        const sheet = styleElement.sheet;
        const groups = this.createCssRuleGroups(components);
        for (const group of groups) {
            const selectorParts = group.selector.split("&");
            let selector = group.selector;
            if (selector.startsWith("*")) {
                selector = "." + cssHashClass + " " + selector;
            }
            else if (selector !== ":root") {
                [selector] = this.trimImportant(selectorParts.length === 1 ?
                    "." + cssHashClass + group.selector :
                    selectorParts.join("." + cssHashClass));
            }
            const idx = sheet.insertRule(selector + "{}");
            const cssRule = sheet.cssRules[idx];
            for (const stylesObject of group.styles)
                for (let [n, v] of Object.entries(stylesObject))
                    if (typeof v === "string" || (typeof v === "number" && v === v))
                        this.setProperty(cssRule, n, v, group.selector);
        }
        let hashSet = Raw.ruleData.get(styleElement);
        if (hashSet)
            hashSet.set(cssHashClass, components);
        else
            Raw.ruleData.set(styleElement, hashSet = new Map([[cssHashClass, components]]));
    }
    /**
     * Stores a WeakMap of Sets of the hashes of the contents of each CSS rule
     * that has been applied to a given generated <style> element.
     */
    static ruleData = new WeakMap();
    /** */
    createCssRuleGroups(components) {
        const groups = [{ selector: "", styles: [] }];
        for (let i = -1; ++i < components.length;) {
            const cur = components[i];
            const last = i > 0 && components[i - 1];
            if (typeof cur === "string" && typeof last === "object")
                groups.push({ selector: "", styles: [] });
            const group = groups[groups.length - 1];
            if (typeof cur === "string")
                group.selector += cur;
            else
                group.styles.push(cur);
        }
        return groups;
    }
    /** */
    setProperty(styleable, property, value, selectorOfContainingRule = "") {
        if (typeof value === "number")
            value ||= 0;
        const [, selectorImportant] = this.trimImportant(selectorOfContainingRule);
        const p = this.toCssDashCase(property);
        if (!Array.isArray(value)) {
            const [v, valueImportant] = this.trimImportant(String(value));
            styleable.style.setProperty(p, v, selectorImportant || valueImportant);
        }
        else
            for (const item of value) {
                const [v, valueImportant] = this.trimImportant(String(item));
                styleable.style.setProperty(p, v, selectorImportant || valueImportant);
            }
    }
    /** */
    toCssDashCase(p) {
        p = p.replace(/[A-Z]/g, char => "-" + char.toLowerCase());
        if (p.slice(0, 6) === "webkit" || p.slice(0, 3) === "moz" || p.slice(0, 2) === "ms")
            p = "-" + p;
        return p;
    }
    /** */
    trimImportant(str) {
        if (str.slice(-1) === "!")
            str = str.slice(0, -1);
        else if (str.slice(-10) === "!important")
            str = str.slice(0, -10);
        else
            return [str, undefined];
        return [str, "important"];
    }
    /**
     * Returns the CSSStyleSheet that stores the CSS rules that should
     * target the specified element. If the element is within a shadow root,
     * the sheet that is returned is the one that is contained within this
     * shadow root.
     */
    getScopedStyleElement(applyTarget) {
        let container = (() => {
            if (Raw.is.shadow(applyTarget))
                return applyTarget;
            const root = applyTarget.getRootNode();
            return root instanceof Document ?
                root.head :
                root;
        })();
        const cls = "raw-style-sheet";
        const children = Array.from(container.children);
        const existing = children.find(e => e.classList.contains(cls));
        if (existing instanceof HTMLStyleElement)
            return existing;
        const styleElement = this.doc.createElement("style");
        styleElement.className = cls;
        container.append(styleElement);
        return styleElement;
    }
    /**
     * Hash calculation function adapted from:
     * https://stackoverflow.com/a/52171480/133737
     */
    hash(value, seed = 0) {
        const val = value.toString();
        let h1 = 0xDEADBEEF ^ seed;
        let h2 = 0X41C6CE57 ^ seed;
        for (let i = 0; i < val.length; i++) {
            let ch = val.charCodeAt(i);
            h1 = Math.imul(h1 ^ ch, 2654435761);
            h2 = Math.imul(h2 ^ ch, 1597334677);
        }
        h1 = Math.imul(h1 ^ h1 >>> 16, 2246822507) ^ Math.imul(h2 ^ h2 >>> 13, 3266489909);
        h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507) ^ Math.imul(h1 ^ h1 >>> 13, 3266489909);
        return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString(36);
    }
}
var raw = new Raw((typeof document !== "undefined") ? document : {});
//@ts-ignore CommonJS compatibility
if (typeof module === "object")
    Object.assign(module.exports, { raw, Raw });
// The comment and + prefix is removed during npm run bundle
//+ export { raw, Raw }
//# sourceMappingURL=data:application/json;base64,